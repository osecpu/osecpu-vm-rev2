#include "osecpu_ask.h"

%define L_invstr0		LOCAL(0)
%define L_restart		LOCAL(1)
%define L_next_group	LOCAL(2)
%define L_putchar		LOCAL(3)
%define L_fighter		LOCAL(4)
%define L_invader		LOCAL(5)

LOCALLABELS(8);

	SInt32 i:R00, j:R01, k:R02;
	SInt32 score:R07, high:R08, point:R09, movewait0:R0A, fx:R0B, laserwait:R0C, lx:R0D, ly:R0E;
	SInt32 ix:R0F, iy:R10, movewait:R11, idir:R12, invline:R13, waitUint:R14;
	VPtr invstr:P01;

	api_malloc_initInt(invstr, T_UINT4, 32 * 6, 0);
#if 0

//	PLIMM(invstr, L_invstr0);

DAT_SA(L_invstr0, T_UINT4, 32 * 6);
	D4B(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0);
	D4B(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0);
	D4B(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0);
	D4B(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0);
	D4B(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0);
	D4B(0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0);
DAT_END();
#endif

//	api_openWin(324, 228);

//	OPSWP(0x14, 0x06);

LB0(L_restart);
	score = 0;
	point = 1;
	movewait0 = 20;
	fx = 18;
		
LB0(L_next_group);
	ix = 7;
	iy = 1;
	invline = 5;
	for (i = 0; i != 6; i++) {
		for (j = 0; j != 26; j++) {
			/* AFFINE(32, k, 32, i, j); */		k = i * 32; k += j;
			R03 = j % 5;
			PASMEM0(32, R03, T_UINT4, invstr, k);
		}
	}
	ly = 0; /* 非表示 */
	laserwait = 0;
	movewait = movewait0;
	idir = +1;
	waitUint = 1024;

	for (;;) {
		// 画面を作る.
//		api_fillRect(MODE_COL3, 0, -1, -1, 0, 0);
		api_openWin(324, 228);
//		api_drawStringDec_2(MODE_COL3, -1, 1, 1,  4 * 8 + 2, 0 * 16 + 2, 'SCORE:\1    HIGH:\1', score, 8, 2, high,  8, 2);
		R04 = fx; R05 = 13; PLIMM(P02, L_fighter); R03 = 3; /* PAD(); */ R06 = 6; CALL(L_putchar);

		for (i = 0; i != 6; i++) {
			for (j = 0; j != 26; j++) {
				/* AFFINE(32, k, 32, i, j); */		k = i * 32; k += j;
				PALMEM0(32, R03, T_UINT4, invstr, k);
				if (R03 == 1) {
					R04 = j + ix; R05 = i + iy;
					PLIMM(P02, L_invader);
					R03 = 4;
					R06 = 2; // PAD();
					CALL(L_putchar);
				}
			}
		}
		if (ly != 0) {
			/* AFFINEI(32, i,  8, lx, 2 + 3); */ 	i = lx * 8; i += 2 + 3;
			/* AFFINEI(32, j, 16, ly, 2 + 1); */	j = ly * 16; j += 2 + 1;
			api_fillRect(MODE_COL3, 3, 2, 14, i, j);
		}

		// インベーダ全滅判定.
		do {
			i = 0;
			for (j = 0; j != 26; j++) {
				/* AFFINE(32, k, 32, invline, j); */	k = invline * 32; k += j;
				PALMEM0(32, R03, T_UINT4, invstr, k);
				i |= R03;
			}
			if (i != 0) break;
			invline--;
			if (invline != -1) continue0;
			i = movewait0 / 3;
			movewait0 -= i;
			api_sleep(0, 1024);
			goto next_group;
		}

		api_sleep(0, waitUint);
		waitUint = 40;
		laserwait--;

		// キー入力.
		j = 0;
		do {
			api_inkey(i, 0);
			if (R31 != 0) {
				j = R31;
			}
			if (i == ' ') {
				if (laserwait <= 0) {
					laserwait = 15;
					lx = fx + 1;
					ly = 13;
				}
			}
			if (i >= 0) continue0;
		}

		// 自機の移動.
		i = fx + j;
		if (0 <= i) {
			if (i <= 37) {
				fx = i;
			}
		}

		// レーザ移動.
		if (ly !=  0) {
			ly--;
			if (ly == 0) {
				point -= 10;
				if (point <= 1) {
					point = 1;
				}
			}
		}

		// あたり判定.
		j = lx - ix;
		k = ly - iy;
		if (k >= 0) {
			if (k <= 5) {
				if (j >= 0) {
					if (j <= 24) {
						/* AFFINE(32, k, 32, k, j); */	k *= 32; k += j;
						PALMEM0(32, R03, T_UINT4, invstr, k);
						if (R03 != 0) { // hit!
							k -= R03;
						//	R03 = 0;
							ly = 0; // PAD();
							for (i = 0; i != 6; i++) {
								PASMEM0(32, ly, T_UINT4, invstr, k);
								k++;
							}
							score += point;
							point++;
							if (high < score) {
								high = score;
							}
						}
					}
				}
			}
		}

		// インベーダ移動.
		if (movewait != 0) {
			movewait--;
		} else {
			movewait = movewait0;
			ix += idir;
			do {
				if (0 <= ix) {
					if (ix <= 14) break;
				}
				j = iy + invline;
				if (j == 12) {
//					api_drawString(MODE_COL3, 1, 1, 1,  15 * 8 + 2, 6 * 16 + 2, 'GAME OVER');
					do {
						api_sleep(0, waitUint);
						api_inkey(i, 0);
						if (i != 10) continue0;
					}
					goto restart;
				}
				idir *= -1;
				iy++;
				ix += idir;
			}
		}
	}
	api_end();

beginFunc(L_putchar);
	do {
		SInt32 x:R00, y:R01, c:R02, xsiz:R03, x0:R04, y0:R05, col:R06, x1:R07, y1:R08;
		xsiz <<= 3;
		
		for (y1 = 2; y1 != 18; y1++) {
			y = y0 * 16;
			y += y1; // PAD();
			for (x1 = 0; x1 != xsiz; x1++) {
                /* AFFINE(32, x, 8, x0, x1); */		x = x0 * 8; x += x1;
				x += 2;
				LMEM0PP(32, c, T_UINT1, P02);
				c *= col;
				api_drawPoint(MODE_COL3, c, x, y);
			}
		}
	}
endFunc();

DAT_SA(L_fighter, T_UINT1, 24 * 16);
	D1B(0,0,0,0, 0,0,0,0, 0,0,0,1, 1,0,0,0, 0,0,0,0, 0,0,0,0); // 00 18 00
	D1B(0,0,0,0, 0,0,0,0, 0,1,1,1, 1,1,1,0, 0,0,0,0, 0,0,0,0); // 00 1e 00
	D1B(0,0,0,0, 0,0,0,1, 1,1,1,1, 1,1,1,1, 1,0,0,0, 0,0,0,0); // 01 ff 80
	D1B(0,0,0,0, 0,0,0,1, 1,1,0,0, 0,0,1,1, 1,0,0,0, 0,0,0,0); // 01 c3 80
	D1B(0,0,0,0, 0,0,0,1, 1,1,0,0, 0,0,1,1, 1,0,0,0, 0,0,0,0); // 01 c3 80
	D1B(0,0,0,0, 0,0,0,1, 1,1,0,0, 0,0,1,1, 1,0,0,0, 0,0,0,0); // 01 c3 80
	D1B(0,0,0,0, 0,0,0,1, 1,1,0,0, 0,0,1,1, 1,0,0,0, 0,0,0,0); // 01 c3 80
	D1B(0,0,0,0, 0,0,0,1, 1,1,1,1, 1,1,1,1, 1,0,0,0, 0,0,0,0); // 01 ff 80
	D1B(0,0,0,0, 0,0,0,1, 1,1,1,1, 1,1,1,1, 1,0,0,0, 0,0,0,0); // 01 ff 80
	D1B(0,1,0,0, 0,0,1,1, 1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,1,0); // 43 ff c2
	D1B(0,1,0,0, 0,1,1,1, 1,1,1,0, 0,1,1,1, 1,1,1,0, 0,0,1,0); // 47 e7 e2
	D1B(0,1,0,0, 1,1,1,1, 1,1,1,0, 0,1,1,1, 1,1,1,1, 0,0,1,0); // 4f e7 f2
	D1B(0,1,0,1, 1,1,1,1, 1,1,1,0, 0,1,1,1, 1,1,1,1, 1,0,1,0); // 5f e7 fa
	D1B(0,1,1,1, 1,1,1,1, 1,1,1,0, 0,1,1,1, 1,1,1,1, 1,1,1,0); // 7f e7 fe
	D1B(0,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,0); // 7f ff fe
	D1B(0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0); // 00 00 00
DAT_END();

DAT_SA(L_invader, T_UINT1, 32 * 16);
	D1B(0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0); // 00 00 00 00
	D1B(0,0,0,0, 0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0, 0,0,0,0); // 00 0f f0 00
	D1B(0,0,0,0, 0,0,0,0, 0,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,0, 0,0,0,0, 0,0,0,0); // 00 7f fe 00
	D1B(0,1,0,0, 0,0,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,1,0); // 43 ff ff c2
	D1B(0,1,0,1, 1,1,1,1, 1,1,0,0, 1,1,1,1, 1,1,1,1, 0,0,1,1, 1,1,1,1, 1,0,1,0); // 5f cf f3 fa
	D1B(0,1,0,1, 1,1,1,1, 1,1,0,0, 1,1,1,1, 1,1,1,1, 0,0,1,1, 1,1,1,1, 1,0,1,0); // 5f cf f3 fa
	D1B(0,1,0,1, 1,1,1,1, 1,1,0,0, 1,1,1,1, 1,1,1,1, 0,0,1,1, 1,1,1,1, 1,0,1,0); // 5f cf f3 fa
	D1B(0,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,0); // 7f ff ff fe
	D1B(0,0,0,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0); // 1f ff ff f8
	D1B(0,0,0,1, 1,1,1,1, 1,1,1,0, 0,0,0,0, 0,0,0,0, 0,1,1,1, 1,1,1,1, 1,0,0,0); // 1f e0 07 f8
	D1B(0,0,0,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0); // 1f ff ff f8
	D1B(0,0,0,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0); // 1f ff ff f8
	D1B(0,0,0,0, 0,0,0,0, 1,1,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,1, 0,0,0,0, 0,0,0,0); // 00 c0 03 00
	D1B(0,0,1,0, 0,0,0,0, 1,1,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,1, 0,0,0,0, 0,1,0,0); // 20 c0 03 04
	D1B(0,0,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,1, 1,1,1,1, 1,1,0,0); // 3f c0 03 fc
	D1B(0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0); // 00 00 00 00
DAT_END();

